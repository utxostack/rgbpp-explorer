/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query BtcAddressBase($address: String!) {\n    btcAddress(address: $address) {\n      address\n      satoshi\n      pendingSatoshi\n      transactionsCount\n    }\n  }\n": types.BtcAddressBaseDocument,
    "\n  query CkbAddressBase($address: String!) {\n    ckbAddress(address: $address) {\n      address\n      shannon\n      balance {\n        total\n        available\n        occupied\n      }\n      transactionsCount\n    }\n  }\n": types.CkbAddressBaseDocument,
    "\n  query BtcTransactionByAddress($address: String!, $afterTxid: String) {\n    btcAddress(address: $address) {\n      transactions(afterTxid: $afterTxid) {\n        txid\n        rgbppTransaction {\n          ckbTransaction {\n            isCellbase\n            blockNumber\n            hash\n            fee\n            feeRate\n            size\n            confirmed\n            confirmations\n            outputs {\n              txHash\n              index\n              capacity\n              cellType\n              type {\n                codeHash\n                hashType\n                args\n              }\n              lock {\n                codeHash\n                hashType\n                args\n              }\n              status {\n                consumed\n                txHash\n                index\n              }\n              xudtInfo {\n                symbol\n                amount\n                decimal\n                typeHash\n              }\n            }\n            inputs {\n              txHash\n              index\n              capacity\n              cellType\n              type {\n                codeHash\n                hashType\n                args\n              }\n              lock {\n                codeHash\n                hashType\n                args\n              }\n              xudtInfo {\n                symbol\n                amount\n                decimal\n                typeHash\n              }\n              status {\n                consumed\n                txHash\n                index\n              }\n            }\n            block {\n              timestamp\n              hash\n            }\n          }\n        }\n        blockHeight\n        blockHash\n        txid\n        version\n        size\n        locktime\n        weight\n        fee\n        feeRate\n        confirmed\n        confirmations\n        transactionTime\n        vin {\n          txid\n          vout\n          scriptsig\n          scriptsigAsm\n          isCoinbase\n          sequence\n          prevout {\n            scriptpubkey\n            scriptpubkeyAsm\n            scriptpubkeyType\n            scriptpubkeyAddress\n            value\n            status {\n              spent\n              txid\n              vin\n            }\n            address {\n              address\n              satoshi\n              pendingSatoshi\n              transactionsCount\n            }\n          }\n        }\n        vout {\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          status {\n            spent\n            txid\n            vin\n          }\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n        }\n      }\n    }\n  }\n": types.BtcTransactionByAddressDocument,
    "\n  query CkbAddress($address: String!, $page: Int!, $pageSize: Int!) {\n    ckbAddress(address: $address) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        size\n        feeRate\n        confirmations\n        inputs {\n          cellType\n          status {\n            consumed\n            txHash\n            index\n          }\n          txHash\n          index\n          capacity\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n        outputs {\n          txHash\n          cellType\n          index\n          capacity\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        block {\n          timestamp\n        }\n      }\n    }\n  }\n": types.CkbAddressDocument,
    "\n  query RgbppCoin($typeHash: String!) {\n    rgbppCoin(typeHash: $typeHash) {\n      name\n      symbol\n      icon\n    }\n  }\n": types.RgbppCoinDocument,
    "\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n": types.RgbppCoinTransactionsByTypeHashDocument,
    "\n  query RgbppCoins($page: Int!, $pageSize: Int!) {\n    rgbppCoins(page: $page, pageSize: $pageSize) {\n      total\n      pageSize\n      coins {\n        icon\n        name\n        symbol\n        l1HoldersCount: holdersCount(layer: L1)\n        l2HoldersCount: holdersCount(layer: L2)\n        h24CkbTransactionsCount\n        totalAmount\n        deployedAt\n        decimal\n        typeHash\n      }\n    }\n  }\n": types.RgbppCoinsDocument,
    "\n  query BtcBlock($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      id\n      height\n      version\n      timestamp\n      transactionsCount\n      confirmations\n      size\n      weight\n      bits\n      difficulty\n      totalFee\n      miner {\n        address\n        satoshi\n        pendingSatoshi\n        transactionsCount\n      }\n      feeRateRange {\n        min\n        max\n      }\n    }\n  }\n": types.BtcBlockDocument,
    "\n  query BtcBlockTransaction($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      timestamp\n      transactions {\n        blockHeight\n        blockHash\n        txid\n        version\n        size\n        locktime\n        weight\n        fee\n        feeRate\n        confirmed\n        transactionTime\n        vout {\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          status {\n            spent\n            txid\n            vin\n          }\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n        }\n        vin {\n          txid\n          vout\n          scriptsig\n          scriptsigAsm\n          isCoinbase\n          sequence\n          prevout {\n            status {\n              spent\n              txid\n              vin\n            }\n            scriptpubkey\n            scriptpubkeyAsm\n            scriptpubkeyType\n            scriptpubkeyAddress\n            value\n            address {\n              address\n              satoshi\n              pendingSatoshi\n              transactionsCount\n            }\n          }\n        }\n      }\n    }\n  }\n": types.BtcBlockTransactionDocument,
    "\n  query CkbBlock($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      version\n      hash\n      number\n      timestamp\n      transactionsCount\n      totalFee\n      miner {\n        address\n        shannon\n        transactionsCount\n      }\n      reward\n      size\n      confirmations\n    }\n  }\n": types.CkbBlockDocument,
    "\n  query CkbBlockTransactions($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      timestamp\n      transactions {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        size\n        feeRate\n        confirmations\n        outputs {\n          txHash\n          index\n          capacity\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          type {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        inputs {\n          status {\n            consumed\n            txHash\n            index\n          }\n          txHash\n          index\n          capacity\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          type {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n      }\n    }\n  }\n": types.CkbBlockTransactionsDocument,
    "\n      query BtcChainInfo {\n        btcChainInfo {\n          tipBlockHeight\n          tipBlockHash\n          difficulty\n          transactionsCountIn24Hours\n          fees {\n            fastest\n            halfHour\n            hour\n            economy\n            minimum\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL1TransactionsCount\n          holdersCount(layer: L1)\n        }\n      }\n    ": types.BtcChainInfoDocument,
    "\n  query RgbppLatestL1Transactions($limit: Int!) {\n    rgbppLatestL1Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n": types.RgbppLatestL1TransactionsDocument,
    "\n      query CkbChainInfo {\n        ckbChainInfo {\n          tipBlockNumber\n          fees {\n            fast\n            slow\n            average\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL2TransactionsCount\n          holdersCount(layer: L2)\n        }\n      }\n    ": types.CkbChainInfoDocument,
    "\n  query RgbppLatestL2Transactions($limit: Int!) {\n    rgbppLatestL2Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        leapDirection\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n": types.RgbppLatestL2TransactionsDocument,
    "\n  query RgbppTransaction($txidOrTxHash: String!) {\n    rgbppTransaction(txidOrTxHash: $txidOrTxHash) {\n      ckbTxHash\n      btcTxid\n      leapDirection\n      blockNumber\n      timestamp\n      btcTransaction {\n        txid\n        blockHeight\n        blockHash\n        size\n        fee\n        feeRate\n        confirmed\n        confirmations\n        vin {\n          txid\n          vout\n          isCoinbase\n          prevout {\n            txid\n            vout\n            value\n            address {\n              address\n            }\n            status {\n              spent\n              txid\n              vin\n            }\n          }\n        }\n        vout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      ckbTransaction {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        feeRate\n        outputs {\n          txHash\n          index\n          capacity\n          cellType\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n        inputs {\n          txHash\n          index\n          capacity\n          cellType\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        block {\n          timestamp\n          hash\n        }\n      }\n    }\n  }\n": types.RgbppTransactionDocument,
    "\n  query BtcTx($txid: String!) {\n    btcTransaction(txid: $txid) {\n      blockHeight\n      blockHash\n      txid\n      version\n      size\n      transactionTime\n      weight\n      fee\n      feeRate\n      confirmed\n      confirmations\n      vin {\n        txid\n        vout\n        scriptsig\n        scriptsigAsm\n        isCoinbase\n        sequence\n        prevout {\n          txid\n          vout\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        scriptpubkey\n        scriptpubkeyAsm\n        scriptpubkeyType\n        scriptpubkeyAddress\n        value\n        address {\n          address\n          satoshi\n          pendingSatoshi\n          transactionsCount\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n": types.BtcTxDocument,
    "\n  query CkbTx($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      isCellbase\n      blockNumber\n      hash\n      fee\n      feeRate\n      size\n      confirmed\n      confirmations\n      outputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      inputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n        hash\n      }\n    }\n  }\n": types.CkbTxDocument,
    "\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      ": types.RgbppStatisticDocument,
    "\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n": types.RgbppLatestTransactionsDocument,
    "\n          query CkbAndBtcChainInfo {\n            ckbChainInfo {\n              tipBlockNumber\n              transactionsCountIn24Hours\n            }\n            btcChainInfo {\n              tipBlockHeight\n              transactionsCountIn24Hours\n            }\n          }\n        ": types.CkbAndBtcChainInfoDocument,
    "\n          query Search($keyword: String!) {\n            search(query: $keyword) {\n              query\n              btcBlock\n              btcTransaction\n              btcAddress\n              ckbBlock\n              ckbTransaction\n              ckbAddress\n              rgbppCoin\n            }\n          }\n        ": types.SearchDocument,
    "\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n": types.BtcAndCkbChainInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcAddressBase($address: String!) {\n    btcAddress(address: $address) {\n      address\n      satoshi\n      pendingSatoshi\n      transactionsCount\n    }\n  }\n"): (typeof documents)["\n  query BtcAddressBase($address: String!) {\n    btcAddress(address: $address) {\n      address\n      satoshi\n      pendingSatoshi\n      transactionsCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbAddressBase($address: String!) {\n    ckbAddress(address: $address) {\n      address\n      shannon\n      balance {\n        total\n        available\n        occupied\n      }\n      transactionsCount\n    }\n  }\n"): (typeof documents)["\n  query CkbAddressBase($address: String!) {\n    ckbAddress(address: $address) {\n      address\n      shannon\n      balance {\n        total\n        available\n        occupied\n      }\n      transactionsCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcTransactionByAddress($address: String!, $afterTxid: String) {\n    btcAddress(address: $address) {\n      transactions(afterTxid: $afterTxid) {\n        txid\n        rgbppTransaction {\n          ckbTransaction {\n            isCellbase\n            blockNumber\n            hash\n            fee\n            feeRate\n            size\n            confirmed\n            confirmations\n            outputs {\n              txHash\n              index\n              capacity\n              cellType\n              type {\n                codeHash\n                hashType\n                args\n              }\n              lock {\n                codeHash\n                hashType\n                args\n              }\n              status {\n                consumed\n                txHash\n                index\n              }\n              xudtInfo {\n                symbol\n                amount\n                decimal\n                typeHash\n              }\n            }\n            inputs {\n              txHash\n              index\n              capacity\n              cellType\n              type {\n                codeHash\n                hashType\n                args\n              }\n              lock {\n                codeHash\n                hashType\n                args\n              }\n              xudtInfo {\n                symbol\n                amount\n                decimal\n                typeHash\n              }\n              status {\n                consumed\n                txHash\n                index\n              }\n            }\n            block {\n              timestamp\n              hash\n            }\n          }\n        }\n        blockHeight\n        blockHash\n        txid\n        version\n        size\n        locktime\n        weight\n        fee\n        feeRate\n        confirmed\n        confirmations\n        transactionTime\n        vin {\n          txid\n          vout\n          scriptsig\n          scriptsigAsm\n          isCoinbase\n          sequence\n          prevout {\n            scriptpubkey\n            scriptpubkeyAsm\n            scriptpubkeyType\n            scriptpubkeyAddress\n            value\n            status {\n              spent\n              txid\n              vin\n            }\n            address {\n              address\n              satoshi\n              pendingSatoshi\n              transactionsCount\n            }\n          }\n        }\n        vout {\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          status {\n            spent\n            txid\n            vin\n          }\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcTransactionByAddress($address: String!, $afterTxid: String) {\n    btcAddress(address: $address) {\n      transactions(afterTxid: $afterTxid) {\n        txid\n        rgbppTransaction {\n          ckbTransaction {\n            isCellbase\n            blockNumber\n            hash\n            fee\n            feeRate\n            size\n            confirmed\n            confirmations\n            outputs {\n              txHash\n              index\n              capacity\n              cellType\n              type {\n                codeHash\n                hashType\n                args\n              }\n              lock {\n                codeHash\n                hashType\n                args\n              }\n              status {\n                consumed\n                txHash\n                index\n              }\n              xudtInfo {\n                symbol\n                amount\n                decimal\n                typeHash\n              }\n            }\n            inputs {\n              txHash\n              index\n              capacity\n              cellType\n              type {\n                codeHash\n                hashType\n                args\n              }\n              lock {\n                codeHash\n                hashType\n                args\n              }\n              xudtInfo {\n                symbol\n                amount\n                decimal\n                typeHash\n              }\n              status {\n                consumed\n                txHash\n                index\n              }\n            }\n            block {\n              timestamp\n              hash\n            }\n          }\n        }\n        blockHeight\n        blockHash\n        txid\n        version\n        size\n        locktime\n        weight\n        fee\n        feeRate\n        confirmed\n        confirmations\n        transactionTime\n        vin {\n          txid\n          vout\n          scriptsig\n          scriptsigAsm\n          isCoinbase\n          sequence\n          prevout {\n            scriptpubkey\n            scriptpubkeyAsm\n            scriptpubkeyType\n            scriptpubkeyAddress\n            value\n            status {\n              spent\n              txid\n              vin\n            }\n            address {\n              address\n              satoshi\n              pendingSatoshi\n              transactionsCount\n            }\n          }\n        }\n        vout {\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          status {\n            spent\n            txid\n            vin\n          }\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbAddress($address: String!, $page: Int!, $pageSize: Int!) {\n    ckbAddress(address: $address) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        size\n        feeRate\n        confirmations\n        inputs {\n          cellType\n          status {\n            consumed\n            txHash\n            index\n          }\n          txHash\n          index\n          capacity\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n        outputs {\n          txHash\n          cellType\n          index\n          capacity\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        block {\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CkbAddress($address: String!, $page: Int!, $pageSize: Int!) {\n    ckbAddress(address: $address) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        size\n        feeRate\n        confirmations\n        inputs {\n          cellType\n          status {\n            consumed\n            txHash\n            index\n          }\n          txHash\n          index\n          capacity\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n        outputs {\n          txHash\n          cellType\n          index\n          capacity\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        block {\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppCoin($typeHash: String!) {\n    rgbppCoin(typeHash: $typeHash) {\n      name\n      symbol\n      icon\n    }\n  }\n"): (typeof documents)["\n  query RgbppCoin($typeHash: String!) {\n    rgbppCoin(typeHash: $typeHash) {\n      name\n      symbol\n      icon\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppCoins($page: Int!, $pageSize: Int!) {\n    rgbppCoins(page: $page, pageSize: $pageSize) {\n      total\n      pageSize\n      coins {\n        icon\n        name\n        symbol\n        l1HoldersCount: holdersCount(layer: L1)\n        l2HoldersCount: holdersCount(layer: L2)\n        h24CkbTransactionsCount\n        totalAmount\n        deployedAt\n        decimal\n        typeHash\n      }\n    }\n  }\n"): (typeof documents)["\n  query RgbppCoins($page: Int!, $pageSize: Int!) {\n    rgbppCoins(page: $page, pageSize: $pageSize) {\n      total\n      pageSize\n      coins {\n        icon\n        name\n        symbol\n        l1HoldersCount: holdersCount(layer: L1)\n        l2HoldersCount: holdersCount(layer: L2)\n        h24CkbTransactionsCount\n        totalAmount\n        deployedAt\n        decimal\n        typeHash\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcBlock($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      id\n      height\n      version\n      timestamp\n      transactionsCount\n      confirmations\n      size\n      weight\n      bits\n      difficulty\n      totalFee\n      miner {\n        address\n        satoshi\n        pendingSatoshi\n        transactionsCount\n      }\n      feeRateRange {\n        min\n        max\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcBlock($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      id\n      height\n      version\n      timestamp\n      transactionsCount\n      confirmations\n      size\n      weight\n      bits\n      difficulty\n      totalFee\n      miner {\n        address\n        satoshi\n        pendingSatoshi\n        transactionsCount\n      }\n      feeRateRange {\n        min\n        max\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcBlockTransaction($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      timestamp\n      transactions {\n        blockHeight\n        blockHash\n        txid\n        version\n        size\n        locktime\n        weight\n        fee\n        feeRate\n        confirmed\n        transactionTime\n        vout {\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          status {\n            spent\n            txid\n            vin\n          }\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n        }\n        vin {\n          txid\n          vout\n          scriptsig\n          scriptsigAsm\n          isCoinbase\n          sequence\n          prevout {\n            status {\n              spent\n              txid\n              vin\n            }\n            scriptpubkey\n            scriptpubkeyAsm\n            scriptpubkeyType\n            scriptpubkeyAddress\n            value\n            address {\n              address\n              satoshi\n              pendingSatoshi\n              transactionsCount\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcBlockTransaction($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      timestamp\n      transactions {\n        blockHeight\n        blockHash\n        txid\n        version\n        size\n        locktime\n        weight\n        fee\n        feeRate\n        confirmed\n        transactionTime\n        vout {\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          status {\n            spent\n            txid\n            vin\n          }\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n        }\n        vin {\n          txid\n          vout\n          scriptsig\n          scriptsigAsm\n          isCoinbase\n          sequence\n          prevout {\n            status {\n              spent\n              txid\n              vin\n            }\n            scriptpubkey\n            scriptpubkeyAsm\n            scriptpubkeyType\n            scriptpubkeyAddress\n            value\n            address {\n              address\n              satoshi\n              pendingSatoshi\n              transactionsCount\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbBlock($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      version\n      hash\n      number\n      timestamp\n      transactionsCount\n      totalFee\n      miner {\n        address\n        shannon\n        transactionsCount\n      }\n      reward\n      size\n      confirmations\n    }\n  }\n"): (typeof documents)["\n  query CkbBlock($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      version\n      hash\n      number\n      timestamp\n      transactionsCount\n      totalFee\n      miner {\n        address\n        shannon\n        transactionsCount\n      }\n      reward\n      size\n      confirmations\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbBlockTransactions($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      timestamp\n      transactions {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        size\n        feeRate\n        confirmations\n        outputs {\n          txHash\n          index\n          capacity\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          type {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        inputs {\n          status {\n            consumed\n            txHash\n            index\n          }\n          txHash\n          index\n          capacity\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          type {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CkbBlockTransactions($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      timestamp\n      transactions {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        size\n        feeRate\n        confirmations\n        outputs {\n          txHash\n          index\n          capacity\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          type {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        inputs {\n          status {\n            consumed\n            txHash\n            index\n          }\n          txHash\n          index\n          capacity\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          type {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query BtcChainInfo {\n        btcChainInfo {\n          tipBlockHeight\n          tipBlockHash\n          difficulty\n          transactionsCountIn24Hours\n          fees {\n            fastest\n            halfHour\n            hour\n            economy\n            minimum\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL1TransactionsCount\n          holdersCount(layer: L1)\n        }\n      }\n    "): (typeof documents)["\n      query BtcChainInfo {\n        btcChainInfo {\n          tipBlockHeight\n          tipBlockHash\n          difficulty\n          transactionsCountIn24Hours\n          fees {\n            fastest\n            halfHour\n            hour\n            economy\n            minimum\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL1TransactionsCount\n          holdersCount(layer: L1)\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppLatestL1Transactions($limit: Int!) {\n    rgbppLatestL1Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query RgbppLatestL1Transactions($limit: Int!) {\n    rgbppLatestL1Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query CkbChainInfo {\n        ckbChainInfo {\n          tipBlockNumber\n          fees {\n            fast\n            slow\n            average\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL2TransactionsCount\n          holdersCount(layer: L2)\n        }\n      }\n    "): (typeof documents)["\n      query CkbChainInfo {\n        ckbChainInfo {\n          tipBlockNumber\n          fees {\n            fast\n            slow\n            average\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL2TransactionsCount\n          holdersCount(layer: L2)\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppLatestL2Transactions($limit: Int!) {\n    rgbppLatestL2Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        leapDirection\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query RgbppLatestL2Transactions($limit: Int!) {\n    rgbppLatestL2Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        leapDirection\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppTransaction($txidOrTxHash: String!) {\n    rgbppTransaction(txidOrTxHash: $txidOrTxHash) {\n      ckbTxHash\n      btcTxid\n      leapDirection\n      blockNumber\n      timestamp\n      btcTransaction {\n        txid\n        blockHeight\n        blockHash\n        size\n        fee\n        feeRate\n        confirmed\n        confirmations\n        vin {\n          txid\n          vout\n          isCoinbase\n          prevout {\n            txid\n            vout\n            value\n            address {\n              address\n            }\n            status {\n              spent\n              txid\n              vin\n            }\n          }\n        }\n        vout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      ckbTransaction {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        feeRate\n        outputs {\n          txHash\n          index\n          capacity\n          cellType\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n        inputs {\n          txHash\n          index\n          capacity\n          cellType\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        block {\n          timestamp\n          hash\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query RgbppTransaction($txidOrTxHash: String!) {\n    rgbppTransaction(txidOrTxHash: $txidOrTxHash) {\n      ckbTxHash\n      btcTxid\n      leapDirection\n      blockNumber\n      timestamp\n      btcTransaction {\n        txid\n        blockHeight\n        blockHash\n        size\n        fee\n        feeRate\n        confirmed\n        confirmations\n        vin {\n          txid\n          vout\n          isCoinbase\n          prevout {\n            txid\n            vout\n            value\n            address {\n              address\n            }\n            status {\n              spent\n              txid\n              vin\n            }\n          }\n        }\n        vout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      ckbTransaction {\n        isCellbase\n        blockNumber\n        hash\n        fee\n        feeRate\n        outputs {\n          txHash\n          index\n          capacity\n          cellType\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n        }\n        inputs {\n          txHash\n          index\n          capacity\n          cellType\n          type {\n            codeHash\n            hashType\n            args\n          }\n          lock {\n            codeHash\n            hashType\n            args\n          }\n          xudtInfo {\n            symbol\n            amount\n            decimal\n            typeHash\n          }\n          status {\n            consumed\n            txHash\n            index\n          }\n        }\n        block {\n          timestamp\n          hash\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcTx($txid: String!) {\n    btcTransaction(txid: $txid) {\n      blockHeight\n      blockHash\n      txid\n      version\n      size\n      transactionTime\n      weight\n      fee\n      feeRate\n      confirmed\n      confirmations\n      vin {\n        txid\n        vout\n        scriptsig\n        scriptsigAsm\n        isCoinbase\n        sequence\n        prevout {\n          txid\n          vout\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        scriptpubkey\n        scriptpubkeyAsm\n        scriptpubkeyType\n        scriptpubkeyAddress\n        value\n        address {\n          address\n          satoshi\n          pendingSatoshi\n          transactionsCount\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcTx($txid: String!) {\n    btcTransaction(txid: $txid) {\n      blockHeight\n      blockHash\n      txid\n      version\n      size\n      transactionTime\n      weight\n      fee\n      feeRate\n      confirmed\n      confirmations\n      vin {\n        txid\n        vout\n        scriptsig\n        scriptsigAsm\n        isCoinbase\n        sequence\n        prevout {\n          txid\n          vout\n          scriptpubkey\n          scriptpubkeyAsm\n          scriptpubkeyType\n          scriptpubkeyAddress\n          value\n          address {\n            address\n            satoshi\n            pendingSatoshi\n            transactionsCount\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        scriptpubkey\n        scriptpubkeyAsm\n        scriptpubkeyType\n        scriptpubkeyAddress\n        value\n        address {\n          address\n          satoshi\n          pendingSatoshi\n          transactionsCount\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbTx($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      isCellbase\n      blockNumber\n      hash\n      fee\n      feeRate\n      size\n      confirmed\n      confirmations\n      outputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      inputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n        hash\n      }\n    }\n  }\n"): (typeof documents)["\n  query CkbTx($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      isCellbase\n      blockNumber\n      hash\n      fee\n      feeRate\n      size\n      confirmed\n      confirmations\n      outputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      inputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n        hash\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      "): (typeof documents)["\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query CkbAndBtcChainInfo {\n            ckbChainInfo {\n              tipBlockNumber\n              transactionsCountIn24Hours\n            }\n            btcChainInfo {\n              tipBlockHeight\n              transactionsCountIn24Hours\n            }\n          }\n        "): (typeof documents)["\n          query CkbAndBtcChainInfo {\n            ckbChainInfo {\n              tipBlockNumber\n              transactionsCountIn24Hours\n            }\n            btcChainInfo {\n              tipBlockHeight\n              transactionsCountIn24Hours\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Search($keyword: String!) {\n            search(query: $keyword) {\n              query\n              btcBlock\n              btcTransaction\n              btcAddress\n              ckbBlock\n              ckbTransaction\n              ckbAddress\n              rgbppCoin\n            }\n          }\n        "): (typeof documents)["\n          query Search($keyword: String!) {\n            search(query: $keyword) {\n              query\n              btcBlock\n              btcTransaction\n              btcAddress\n              ckbBlock\n              ckbTransaction\n              ckbAddress\n              rgbppCoin\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n"): (typeof documents)["\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;