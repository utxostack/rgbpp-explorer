// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statistic     Statistic?
  indexerStatus IndexerStatus?
  Block         Block[]
  Transaction   Transaction[]
  Address       Address[]
  UDT           UDT[]
}

model Block {
  id                Int      @id @default(autoincrement())
  chainId           String
  hash              String
  number            Int
  timestamp         DateTime
  transactionsCount Int
  size              Int
  totalFee          BigInt
  minFee            BigInt
  maxFee            BigInt
  difficulty        BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transactions Transaction[]
  chain        Chain         @relation(fields: [chainId], references: [id])

  @@unique([chainId, hash])
  @@unique([chainId, number])
}

model Transaction {
  id           Int      @id @default(autoincrement())
  chainId      String
  hash         String
  index        Int
  blockNumber  Int
  timestamp    DateTime
  fee          BigInt
  size         Int
  lockScriptId Int?
  typeScriptId Int?
  isCellbase   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  chain      Chain       @relation(fields: [chainId], references: [id])
  block      Block       @relation(fields: [chainId, blockNumber], references: [chainId, number])
  LockScript LockScript? @relation(fields: [lockScriptId], references: [id])
  TypeScript TypeScript? @relation(fields: [typeScriptId], references: [id])
  outputs    Output[]

  @@unique([chainId, hash])
}

model Output {
  id               Int      @id @default(autoincrement())
  chainId          String
  txHash           String
  index            Int
  consumedByTxHash String?
  consumedByIndex  Int?
  capacity         BigInt
  lockScriptId     Int
  typeScriptId     Int?
  data             String?
  isLive           Boolean  @default(true)
  cellbase         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  transaction Transaction @relation(fields: [chainId, txHash], references: [chainId, hash])
  lockScript  LockScript  @relation(fields: [chainId, lockScriptId], references: [chainId, id])
  typeScript  TypeScript? @relation(fields: [chainId, typeScriptId], references: [chainId, id])

  @@unique([chainId, txHash, index])
}

model LockScript {
  id          Int      @id @default(autoincrement())
  chainId     String
  codeHash    String   @db.Char(64)
  hashType    Int
  args        String
  scriptHash  String   @unique @db.Char(64)
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  transactions Transaction[]
  Output       Output[]
  Address      Address[]

  @@unique([chainId, id])
}

model TypeScript {
  id          Int      @id @default(autoincrement())
  chainId     String
  codeHash    String   @db.Char(64)
  hashType    Int
  args        String
  scriptHash  String   @unique @db.Char(64)
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  transactions Transaction[]
  Output       Output[]
  UDT          UDT[]

  @@unique([chainId, id])
}

model Address {
  id               Int      @id @default(autoincrement())
  chainId          String
  address          String
  lockScriptId     Int
  balance          BigInt
  balanceOccupied  BigInt
  transactionCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  chain      Chain      @relation(fields: [chainId], references: [id])
  lockScript LockScript @relation(fields: [chainId, lockScriptId], references: [chainId, id])

  @@unique([chainId, address])
}

model UDT {
  id               Int      @id @default(autoincrement())
  chainId          String
  typeHash         String
  typeScriptId     Int
  name             String?
  symbol           String
  decimal          Int
  description      String?
  totalSupply      BigInt
  holdersCount     Int
  transactionCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  chain      Chain      @relation(fields: [chainId], references: [id])
  typeScript TypeScript @relation(fields: [chainId, typeScriptId], references: [chainId, id])

  @@unique([chainId, typeHash])
}

model Statistic {
  id                Int      @id @default(autoincrement())
  chainId           String   @unique
  tipBlockNumber    Int
  tipBlockHash      String
  totalTransactions BigInt
  totalCapacity     BigInt
  totalAddresses    BigInt
  averageBlockTime  Float
  currentDifficulty BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  chain Chain @relation(fields: [chainId], references: [id])
}

model IndexerStatus {
  id               Int      @id @default(autoincrement())
  chainId          String   @unique
  lastIndexedBlock Int
  lastIndexedTx    String
  isIndexing       Boolean
  lastIndexedAt    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  chain Chain @relation(fields: [chainId], references: [id])
}
