// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id               String   @id
  name             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  blocks           Block[]
  transactions     Transaction[]
  cells            Cell[]
  addresses        Address[]
  udts             UDT[]
  scripts          Script[]
  statistic        Statistic?
  indexerStatus    IndexerStatus?
}

model Block {
  id                Int      @id @default(autoincrement())
  chainId           String
  hash              String
  number            Int
  timestamp         DateTime
  transactionsCount Int
  size              Int
  miner             String
  reward            BigInt
  totalFee          BigInt
  difficulty        BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transactions      Transaction[]
  chain             Chain    @relation(fields: [chainId], references: [id])

  @@unique([chainId, hash])
  @@unique([chainId, number])
}

model Transaction {
  id            Int      @id @default(autoincrement())
  chainId       String
  hash          String
  index         Int
  blockNumber   Int
  timestamp     DateTime
  fee           BigInt
  size          Int
  isCellbase    Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  outputs   Cell[]   @relation("CreatedCells")
  inputs    Cell[]   @relation("ConsumedCells")
  chain         Chain    @relation(fields: [chainId], references: [id])
  block         Block    @relation(fields: [chainId, blockNumber], references: [chainId, number])

  @@unique([chainId, hash])
}

model Cell {
  id                Int         @id @default(autoincrement())
  chainId           String
  txHash         String
  index             Int
  consumedByTxHash        String?
  consumedByIndex        Int?
  capacity          BigInt
  lockScriptId      Int
  typeScriptId      Int?
  data              String?
  isLive            Boolean     @default(true)
  cellbase          Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  chain             Chain       @relation(fields: [chainId], references: [id])
  transaction       Transaction @relation(fields: [chainId, txHash], references: [chainId, hash])
  lockScript        Script      @relation("LockScript", fields: [chainId, lockScriptId], references: [chainId, id])
  typeScript        Script?     @relation("TypeScript", fields: [chainId, typeScriptId], references: [chainId, id])
  consumedByTx      Transaction? @relation("ConsumedCells", fields: [chainId, consumedByTxHash], references: [chainId, id])

  @@unique([chainId, createdByTxHash, index])
}

model Script {
  id               Int      @id @default(autoincrement())
  chainId          String
  codeHash         String
  hashType         String
  args             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  chain            Chain    @relation(fields: [chainId], references: [id])

  @@unique([chainId, codeHash, hashType, args])
}

model Address {
  id               Int      @id @default(autoincrement())
  chainId          String
  address          String
  lockScriptId     Int
  balance          BigInt
  balanceOccupied  BigInt
  transactionCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  chain            Chain    @relation(fields: [chainId], references: [id])
  lockScript       Script   @relation(fields: [chainId, lockScriptId], references: [chainId, id])

  @@unique([chainId, address])
}

model UDT {
  id               Int      @id @default(autoincrement())
  chainId          String
  typeHash         String
  typeScriptId     Int
  name             String?
  symbol           String
  decimal          Int
  description      String?
  totalSupply      BigInt
  holdersCount     Int
  transactionCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  chain            Chain    @relation(fields: [chainId], references: [id])
  typeScript       Script   @relation(fields: [chainId, typeScriptId], references: [chainId, id])

  @@unique([chainId, typeHash])
}

model Statistic {
  id                          Int      @id @default(autoincrement())
  chainId                     String   @unique
  chain                       Chain    @relation(fields: [chainId], references: [id])
  tipBlockNumber              Int
  tipBlockHash                String
  totalTransactions           BigInt
  totalCapacity               BigInt
  totalAddresses              BigInt
  averageBlockTime            Float
  currentDifficulty           BigInt
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model IndexerStatus {
  id                Int      @id @default(autoincrement())
  chainId           String   @unique
  lastIndexedBlock  Int
  lastIndexedTx     String
  isIndexing        Boolean
  lastIndexedAt     DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  chain             Chain    @relation(fields: [chainId], references: [id])
}
